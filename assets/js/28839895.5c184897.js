"use strict";(self.webpackChunkcadence=self.webpackChunkcadence||[]).push([[9171],{89064:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"get-started/golang-hello-world","title":"Golang hello world","description":"This section provides step-by-step instructions on how to write and run a HelloWorld workflow in Cadence with Golang. You will learn two critical building blocks of Cadence: activities and workflows. First, you will write an activity function that prints a \\"Hello World!\\" message in the log. Then, you will write a workflow function that executes this activity.","source":"@site/docs/01-get-started/03-golang-hello-world.md","sourceDirName":"01-get-started","slug":"/get-started/golang-hello-world","permalink":"/Cadence-Docs/docs/get-started/golang-hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/cadence-workflow/Cadence-Docs/tree/master/docs/01-get-started/03-golang-hello-world.md","tags":[],"version":"current","lastUpdatedBy":"Le Minh Tri","lastUpdatedAt":1756948455000,"sidebarPosition":3,"frontMatter":{"layout":"default","title":"Golang hello world","permalink":"/docs/get-started/golang-hello-world"},"sidebar":"docsSidebar","previous":{"title":"Java hello world","permalink":"/Cadence-Docs/docs/get-started/java-hello-world"},"next":{"title":"Video Tutorials","permalink":"/Cadence-Docs/docs/get-started/video-tutorials"}}');var r=n(74848),i=n(28453);const l={layout:"default",title:"Golang hello world",permalink:"/docs/get-started/golang-hello-world"},a="Golang Hello World",c={},s=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Step 1. Implement A Cadence Worker Service",id:"step-1-implement-a-cadence-worker-service",level:2},{value:"Step 2. Write a simple Cadence hello world activity and workflow",id:"step-2-write-a-simple-cadence-hello-world-activity-and-workflow",level:2},{value:"Step 3. Run the workflow with Cadence CLI",id:"step-3-run-the-workflow-with-cadence-cli",level:2},{value:"(Optional) Step 4. Monitor Cadence workflow with Cadence web UI",id:"optional-step-4-monitor-cadence-workflow-with-cadence-web-ui",level:2},{value:"What is Next",id:"what-is-next",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"golang-hello-world",children:"Golang Hello World"})}),"\n",(0,r.jsx)(t.p,{children:'This section provides step-by-step instructions on how to write and run a HelloWorld workflow in Cadence with Golang. You will learn two critical building blocks of Cadence: activities and workflows. First, you will write an activity function that prints a "Hello World!" message in the log. Then, you will write a workflow function that executes this activity.'}),"\n",(0,r.jsx)(t.h2,{id:"prerequisite",children:"Prerequisite"}),"\n",(0,r.jsx)(t.p,{children:"To successfully run this hello world sample, follow this checklist of setting up Cadence environment"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Your worker is running properly and you have registered the hello world activity and workflow to the worker"}),"\n",(0,r.jsx)(t.li,{children:"Your Cadence server is running (check your background docker container process)"}),"\n",(0,r.jsx)(t.li,{children:"You have successfully registered a domain for this workflow"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["You must finish part 2 and 3 by following the ",(0,r.jsx)(t.a,{href:"/docs/get-started/server-installation",children:"first section"})," to proceed the next steps.\nWe are using domain called ",(0,r.jsx)(t.code,{children:"test-domain"})," for this tutorial project."]}),"\n",(0,r.jsx)(t.h2,{id:"step-1-implement-a-cadence-worker-service",children:"Step 1. Implement A Cadence Worker Service"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Init your go module:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"go mod init <your-go-module>\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:["Create a new ",(0,r.jsx)(t.code,{children:"main.go"})," file in your local directory and paste the basic worker service layout."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"net/http"\n\t"go.uber.org/cadence/.gen/go/cadence/workflowserviceclient"\n\t"go.uber.org/cadence/compatibility"\n\t"go.uber.org/cadence/worker"\n\n\tapiv1 "github.com/uber/cadence-idl/go/proto/api/v1"\n\t"github.com/uber-go/tally"\n\t"go.uber.org/zap"\n\t"go.uber.org/zap/zapcore"\n\t"go.uber.org/yarpc"\n\t"go.uber.org/yarpc/transport/grpc"\n)\n\nvar HostPort = "127.0.0.1:7833"\nvar Domain = "test-domain"\nvar TaskListName = "test-worker"\nvar ClientName = "test-worker"\nvar CadenceService = "cadence-frontend"\n\nfunc main() {\n\tstartWorker(buildLogger(), buildCadenceClient())\n\terr := http.ListenAndServe(":8080", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc buildLogger() *zap.Logger {\n\tconfig := zap.NewDevelopmentConfig()\n\tconfig.Level.SetLevel(zapcore.InfoLevel)\n\n\tvar err error\n\tlogger, err := config.Build()\n\tif err != nil {\n\t\tpanic("Failed to setup logger")\n\t}\n\n\treturn logger\n}\n\nfunc buildCadenceClient() workflowserviceclient.Interface {\n\tdispatcher := yarpc.NewDispatcher(yarpc.Config{\n\t\tName: ClientName,\n\t\tOutbounds: yarpc.Outbounds{\n\t\t\tCadenceService: {Unary: grpc.NewTransport().NewSingleOutbound(HostPort)},\n\t\t},\n\t})\n\tif err := dispatcher.Start(); err != nil {\n\t\tpanic("Failed to start dispatcher")\n\t}\n\n\tclientConfig := dispatcher.ClientConfig(CadenceService)\n\n\treturn compatibility.NewThrift2ProtoAdapter(\n\t\tapiv1.NewDomainAPIYARPCClient(clientConfig),\n\t\tapiv1.NewWorkflowAPIYARPCClient(clientConfig),\n\t\tapiv1.NewWorkerAPIYARPCClient(clientConfig),\n\t\tapiv1.NewVisibilityAPIYARPCClient(clientConfig),\n\t)\n}\n\nfunc startWorker(logger *zap.Logger, service workflowserviceclient.Interface) {\n\t// TaskListName identifies set of client workflows, activities, and workers.\n\t// It could be your group or client or application name.\n\tworkerOptions := worker.Options{\n\t\tLogger:       logger,\n\t\tMetricsScope: tally.NewTestScope(TaskListName, map[string]string{}),\n\t}\n\n\tworker, err := worker.NewV2(\n\t\tservice,\n\t\tDomain,\n\t\tTaskListName,\n\t\tworkerOptions)\n\tif err != nil {\n\t\tpanic("Failed to initialize worker")\n\t}\n\n\terr = worker.Start()\n\tif err != nil {\n\t\tpanic("Failed to start worker")\n\t}\n\n\tlogger.Info("Started Worker.", zap.String("worker", TaskListName))\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"In this worker service, we start a HTTP server and create a new Cadence client running continuously at the background."}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Run the following command to install dependencies"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"go get go.uber.org/yarpc@v1.80.0\ngo mod tidy\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"4",children:["\n",(0,r.jsx)(t.li,{children:"Start the server on your local, you may see logs such like"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-log",children:'2023-07-03T11:46:46.266-0700    INFO    internal/internal_worker.go:826 Worker has no workflows registered, so workflow worker will not be started.     {"Domain": "test-domain", "TaskList": "test-worker", "WorkerID": "35987@uber-C02F18EQMD6R@test-worker@90c0260e-ba5c-4652-9f10-c6d1f9e29c1d"}\n2023-07-03T11:46:46.267-0700    INFO    internal/internal_worker.go:834 Started Workflow Worker {"Domain": "test-domain", "TaskList": "test-worker", "WorkerID": "35987@uber-C02F18EQMD6R@test-worker@90c0260e-ba5c-4652-9f10-c6d1f9e29c1d"}\n2023-07-03T11:46:46.267-0700    INFO    internal/internal_worker.go:838 Worker has no activities registered, so activity worker will not be started.    {"Domain": "test-domain", "TaskList": "test-worker", "WorkerID": "35987@uber-C02F18EQMD6R@test-worker@90c0260e-ba5c-4652-9f10-c6d1f9e29c1d"}\n2023-07-03T11:46:46.267-0700    INFO    cadence-worker/main.go:75       Started Worker. {"worker": "test-worker"}\n'})}),"\n",(0,r.jsx)(t.p,{children:"You may see this because there are no activities and workflows registered to the worker. Let's proceed to next steps to write a hello world activity and workflow."}),"\n",(0,r.jsx)(t.h2,{id:"step-2-write-a-simple-cadence-hello-world-activity-and-workflow",children:"Step 2. Write a simple Cadence hello world activity and workflow"}),"\n",(0,r.jsxs)(t.p,{children:["Let's write a hello world activity, which take a single input called ",(0,r.jsx)(t.code,{children:"name"})," and greet us after the workflow is finished."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'func helloWorldWorkflow(ctx workflow.Context, name string) (*string, error) {\n\tao := workflow.ActivityOptions{\n\t\tScheduleToStartTimeout: time.Minute,\n\t\tStartToCloseTimeout:    time.Minute,\n\t\tHeartbeatTimeout:       time.Second * 20,\n\t}\n\tctx = workflow.WithActivityOptions(ctx, ao)\n\n\tlogger := workflow.GetLogger(ctx)\n\tlogger.Info("helloworld workflow started")\n\tvar helloworldResult string\n\terr := workflow.ExecuteActivity(ctx, helloWorldActivity, name).Get(ctx, &helloworldResult)\n\tif err != nil {\n\t\tlogger.Error("Activity failed.", zap.Error(err))\n\t\treturn nil, err\n\t}\n\n\tlogger.Info("Workflow completed.", zap.String("Result", helloworldResult))\n\n\treturn &helloworldResult, nil\n}\n\nfunc helloWorldActivity(ctx context.Context, name string) (string, error) {\n\tlogger := activity.GetLogger(ctx)\n\tlogger.Info("helloworld activity started")\n\treturn "Hello " + name + "!", nil\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Don't forget to register the workflow and activity to the worker."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"// add the following lines to the function startWorker before calling worker.Start()\nworker.RegisterWorkflow(helloWorldWorkflow)\nworker.RegisterActivity(helloWorldActivity)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Import the missing modules if they were not automatically added."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'import (\n    "context"\n    "time"\n    "go.uber.org/cadence/activity"\n    "go.uber.org/cadence/workflow"\n)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"step-3-run-the-workflow-with-cadence-cli",children:"Step 3. Run the workflow with Cadence CLI"}),"\n",(0,r.jsx)(t.p,{children:"Restart your worker and run the following command to interact with your workflow."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"cadence --domain test-domain workflow start --et 60 --tl test-worker --workflow_type main.helloWorldWorkflow --input '\"World\"'\n"})}),"\n",(0,r.jsx)(t.p,{children:"or use this alternative dockerized cadence command"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker run --network=host --rm ubercadence/cli:master --domain test-domain workflow start --et 60 --tl test-worker --workflow_type main.helloWorldWorkflow --input '\"World\"'\n"})}),"\n",(0,r.jsx)(t.p,{children:"You should see logs in your worker terminal like"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-log",children:'2023-07-16T11:30:02.717-0700    INFO    cadence-worker/code.go:104      Workflow completed. {"Domain": "test-domain", "TaskList": "test-worker", "WorkerID": "11294@uber-C02F18EQMD6R@test-worker@5829c68e-ace0-472f-b5f3-6ccfc7903dd5", "WorkflowType": "main.helloWorldWorkflow", "WorkflowID": "8acbda3c-d240-4f27-8388-97c866b8bfb5", "RunID": "4b91341f-056f-4f0b-ab64-83bcc3a53e5a", "Result": "Hello World!"}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Congratulations! You just launched your very first Cadence workflow from scratch"}),"\n",(0,r.jsx)(t.h2,{id:"optional-step-4-monitor-cadence-workflow-with-cadence-web-ui",children:"(Optional) Step 4. Monitor Cadence workflow with Cadence web UI"}),"\n",(0,r.jsx)(t.p,{children:"When you start the Cadence backend server, it also automatically starts a front end portal for your workflow. Open you browser and go to"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"http://localhost:8088",children:"http://localhost:8088"})}),"\n",(0,r.jsxs)(t.p,{children:["You may see a dashboard below\n",(0,r.jsx)(t.img,{alt:"cadence-ui",src:n(60269).A+"",width:"3790",height:"674"})]}),"\n",(0,r.jsxs)(t.p,{children:["Type the domain you used for the tutorial, in this case, we type ",(0,r.jsx)(t.code,{children:"test-domain"})," and hit enter. Then you can see a complete history of the workflows you have triggered associated to this domain.\n",(0,r.jsx)(t.img,{alt:"cadence-ui-detailed",src:n(30542).A+"",width:"3790",height:"764"})]}),"\n",(0,r.jsx)(t.h2,{id:"what-is-next",children:"What is Next"}),"\n",(0,r.jsxs)(t.p,{children:["Now you have completed the tutorials. You can continue to explore the key ",(0,r.jsx)(t.a,{href:"/docs/concepts",children:"concepts"})," in Cadence, and also how to use them with ",(0,r.jsx)(t.a,{href:"/docs/go-client",children:"Go Client"})]}),"\n",(0,r.jsxs)(t.p,{children:["For complete, ready to build samples covering all the key Cadence concepts go to ",(0,r.jsx)(t.a,{href:"https://github.com/cadence-workflow/cadence-samples",children:"Cadence-Samples"})," for more examples."]}),"\n",(0,r.jsxs)(t.p,{children:["You can also review ",(0,r.jsx)(t.a,{href:"https://github.com/cadence-workflow/cadence-go-client/",children:"Cadence-Client"})," and ",(0,r.jsx)(t.a,{href:"https://pkg.go.dev/go.uber.org/cadence",children:"go-docs"})," for more documentation."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},60269:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/cadence_ui-7a1200a6a9f9d11aa28452f0cd539b71.png"},30542:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/cadence_ui_detailed-786dba0e7aa1f9048af4f0c1420c3ccf.png"},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var o=n(96540);const r={},i=o.createContext(r);function l(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);